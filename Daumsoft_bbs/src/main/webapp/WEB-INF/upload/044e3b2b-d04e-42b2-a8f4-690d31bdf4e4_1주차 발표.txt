안녕하십니까 1-2주차 과제 발표자 나진욱입니다. 과제 발표 시작하겠습니다. (클릭)
목차는 개요, 개발환경, 진행과정, 프로그램 시연, 느낀 점 순으로 진행하겠습니다. (클릭)

첫 번째는 17만여개의 데이터를 파싱하여 DOC 테이블에 데이터를 넣기입니다. (클릭)
두 번째는 첫 번째에서 DOC 테이블에 넣었던 데이터를 파싱하여 tsv 파일로 출력하기 입니다. (클릭)
그 다음은 DOC 테이블에 넣은 데이터를 Tagged File 형식에 맞게 출력하기 입니다. (클릭) 
Json 형식으로 key와 value 형식에 맞게 출력하기 입니다. (클릭)

앞에서 생성한 Tagged text file을 읽어 파싱하여 DOC2 테이블에 데이터를 넣기입니다. (클릭)
그리고 공통적으로 프로그램 실행 시간을 출력해 내는 것입니다.

개발 환경으로는 eclipse 최신 버전과 jdk 1.8버전을 사용하였고 DB는 MariaDB와 HeidiSQL을 사용하였습니다.

진행 과정 설명드리겠습니다.
저는 클래스를 크게 4개로 구분하였습니다.
Main 클래스는 실행만을 위한 클래스이고 DBConnect클래스는 DB연결을 위한 클래스입니다.
DataAccess클래스는 DB관련 처리 작업만을 위한 클래스이고 ParseClass는 파싱 작업을 위한 클래스입니다. (클릭)

다음은 전체적인 프로세스 흐름도입니다.
메인 클래스에서 실행을 하면 DataAccess클래스에서 DBConnect클래스를 통해
DB에 접속하고 데이터를 가져와서 Parse클래스를 통해 파싱을 하는 흐름으로 진행이됩니다. (클릭)

첫 번째로 tsv파일을 파싱하여 DOC테이블에 넣는 과정입니다. 저는 univocity-parser 프레임워크를 사용하였습니다.
univocity-parser는 tsv,csv,json 형식의 파일을 파싱을해주는 프레임워크입니다.
로컬에 저장된 doc.tsv파일을 읽어들인 후 TsvParser 객체의 parseAll 함수에 넣어 전달하면
자료형이 String[]인 List  변수로 데이터를 받을 수있습니다.
데이터를 넣는 과정입니다. 데이터를 17만여개를 넣는 과정에서 처음에 10분 정도의 시간이 걸려 시간을 단축하기 위해
알아본 결과 PreparedStatement의 Batch 함수를 사용하는 방법을 알게되었고
조건문을 통해 addBatch()를 통해 쿼리문을 메모리에 올려두기만 하였다가 100,000이 되었을 때 executeBatch()를 하여 쿼리를 전송하여
DOC테이블에 데이터를 넣었고 나머지 7만여개데이터는 반복문을 빠져나오고나서 한번 더 executeBatch()를 해주어 전송하였습니다.

다음은 앞에서 넣었던 DOC테이블의 데이터를 tsv 파일로 다시 출력해내는 것입니다.
parse클래스의 fileTSV 메서드에 상단에 출력될 컬럼명과 데이터 파일명 구분을 위한 문자열을 전송을 합니다.


